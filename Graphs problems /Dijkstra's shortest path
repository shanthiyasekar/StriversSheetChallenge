#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // Write your code here.
     vector<int>ans;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>dist(vertices);
        vector<pair<int,int>>adj[vertices];
        for(int i=0;i<vec.size();i++)
        {
          adj[vec[i][0]].push_back({vec[i][1], vec[i][2]});
          adj[vec[i][1]].push_back({vec[i][0],vec[i][2]});
        }
        for(int i=0;i<vertices;i++)
            dist[i]=INT_MAX;
        dist[source]=0;
        pq.push({0,source});
        while(!pq.empty())
        {
            int w=pq.top().first;
            int node=pq.top().second;
            
            pq.pop();
            for(auto it:adj[node])
            {
                int a=it.second;
                if(w+a<dist[it.first])
                {
                    dist[it.first]=w+it.second;
                    pq.push({dist[it.first],it.first});
                }
            }
        }
        return dist;
}
