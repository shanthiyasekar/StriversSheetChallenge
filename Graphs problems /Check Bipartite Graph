#include<bits/stdc++.h>
bool check(int start,vector<int>adj[],int visit[])
{
        
	queue<int>q;
	q.push(start);
	visit[start]=0;
	while(!q.empty())
    {
	    int node=q.front();
	    q.pop();
		for(auto i:adj[node])
	    {
	        if(visit[i]==-1)
	        {
	            visit[i]=!visit[node];
	            q.push(i);
	        }
	        else if(visit[i]==visit[node])
	        {
	            return false;
	        }
	    }
	}
	return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.

		vector<int>adj[edges.size()];
		for(int i=0;i<edges.size();i++)
		{
			for(int j=0;j<edges[0].size();j++)
			{
				if(edges[i][j]==1&&i!=j)
				{
					adj[i].push_back(j);
					adj[j].push_back(i);
				}
				
			}
		}
		int V=edges.size();
		int visit[V];
	    for(int i=0;i<V;i++)
	        visit[i]=-1;
	   	for(int i=0;i<V;i++)
	   	{
	       if(visit[i]==-1)
	       {
	           if(check(i,adj,visit)==false)
	            return false;
	           
	       }
	   }
	   return true;
}
